<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'README.md'))\build\common.props" />

  <!--
    ============================================================
    This is for orchestrated build scenarios. The NuGet.Client-Orchestrated build definition builds this file directly.
    ============================================================
  -->

  <Import Project="$(BuildCommonDirectory)common.targets" />

  <UsingTask TaskName="Microsoft.DotNet.Build.Tasks.Feed.PushToBlobFeed" AssemblyFile="$(MicrosoftDotNetBuildTasksFeedFilePath)" />
  <UsingTask TaskName="Microsoft.DotNet.Maestro.Tasks.PushMetadataToBuildAssetRegistry" AssemblyFile="$(MicrosoftDotNetMaestroTasksFilePath)" />

  <Target Name="GenerateManifest">
    <Error Condition="!Exists($(NuGetClientNupkgsDirectoryPath))" Text="Package output directory '$(NuGetClientNupkgsDirectoryPath)' does not exist." />
    <Error Condition="'$(FeedUrl)' == ''" Text="The FeedUrl property is required." />

    <ItemGroup>
      <Artifacts Include="$(NuGetClientNupkgsDirectoryPath)*.nupkg" />
    </ItemGroup>

    <Error Condition="'@(Artifacts)' == ''" Text="No packages to push." />

    <ItemGroup>
      <BuildData Include="Location=$(FeedUrl)" />
    </ItemGroup>

    <Error Condition="'$(BuildId)' == ''" Text="The BuildId property is required." />
    <Error Condition="'$(ManifestFilePath)' == ''" Text="The ManifestFilePath property is required." />
    <Error Condition="'$(RepoBranch)' == ''" Text="The RepoBranch property is required." />
    <Error Condition="'$(RepoCommit)' == ''" Text="The RepoCommit property is required." />
    <Error Condition="'$(RepoUri)' == ''" Text="The RepoUri property is required." />

    <GenerateBuildManifest Artifacts="@(Artifacts)"
                           BuildData="@(BuildData)"
                           BuildId="$(BuildId)"
                           OutputPath="$(ManifestFilePath)"
                           RepoBranch="$(RepoBranch)"
                           RepoCommit="$(RepoCommit)"
                           RepoUri="$(RepoUri)" />
  </Target>


  <Target Name="PublishPackagesToBuildAssetRegistry">
    <Error Condition="!Exists($(NuGetClientNupkgsDirectoryPath))" Text="Package output directory '$(NuGetClientNupkgsDirectoryPath)' does not exist." />
    <Error Condition="Exists($(ManifestFilePath))" Text="Manifest file '$(ManifestFilePath)' already exists." />
    <Error Condition="'$(FeedUrl)' == ''" Text="The FeedUrl property is required." />

    <ItemGroup>
      <ItemsToPush Include="$(NuGetClientNupkgsDirectoryPath)*.nupkg" />
    </ItemGroup>

    <Error Condition="'@(ItemsToPush)' == ''" Text="No packages to push." />

    <ItemGroup>
      <BuildData Include="Location=$(FeedUrl)" />
    </ItemGroup>

    <Error Condition="'$(MaestroAccessToken)' == ''" Text="The MaestroAccessToken property is required." />
    <Error Condition="'$(BuildId)' == ''" Text="The BuildId property is required." />
    <Error Condition="'$(ManifestFilePath)' == ''" Text="The ManifestFilePath property is required." />
    <Error Condition="'$(RepoBranch)' == ''" Text="The RepoBranch property is required." />
    <Error Condition="'$(RepoCommit)' == ''" Text="The RepoCommit property is required." />
    <Error Condition="'$(RepoUri)' == ''" Text="The RepoUri property is required." />

    <PropertyGroup>
      <PublishOverwrite Condition="'$(PublishOverwrite)' == ''">false</PublishOverwrite>
      <MaxClients Condition="'$(MaxClients)' == ''">8</MaxClients>
    </PropertyGroup>

    <PushToBlobFeed ExpectedFeedUrl="$(FeedUrl)"
                    AccountKey="$(MaestroAccessToken)"
                    ItemsToPush="@(ItemsToPush)"
                    Overwrite="$(PublishOverwrite)"
                    MaxClients="$(MaxClients)"
                    ManifestBuildId="$(BuildId)"
                    ManifestBranch="$(RepoBranch)"
                    ManifestCommit="$(RepoCommit)"
                    ManifestBuildData="$(BuildData)"
                    ManifestRepoUri="$(RepoUri)"
                    AssetManifestPath="$(ManifestFilePath)" />
  </Target>

  <Target Name="PublishManifestToBuildAssetRegistry">
    <Error Condition="'$(MaestroAccessToken)' == ''" Text="The MaestroAccessToken property is required." />
    <Error Condition="'$(MaestroApiEndpoint)' == ''" Text="The MaestroApiEndpoint property is required." />
    <Error Condition="!Exists($(ManifestFilePath))" Text="The manifest file '$(ManifestFilePath)' does not exist." />

    <PushMetadataToBuildAssetRegistry
        BuildAssetRegistryToken="$(MaestroAccessToken)"
        MaestroApiEndpoint="$(MaestroApiEndpoint)"
        ManifestsPath="$(ManifestFilePath)" />
  </Target>
</Project>